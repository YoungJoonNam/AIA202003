package ch_operator;

import java.lang.Math;

public class FirstTaskmakeTheJavaCode {

	public static void main(String[] args) {
//		1. 두 수의 차 구하기 - 큰 수에서 작은 수
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//
//		1- 두 숫자를 받는다. 혹은 두 숫자를 저장한다.
//		2- 두숫자의 크기를 비교한다.
//		3- 비교 후 큰수를 출력한다.
//
//		1- 두 수를 입력받는다.
//		2- 두 수의 크기를 비교한다.
//		3- 큰 수에서 작은 수를 뺀다.
//		4- 두 수의 차를 출력한다. 
		System.out.println("\n[1번--------------------------------]");
		
		int nMax = 32;
		int nMin = 7;
		if(nMax > nMin) {
			System.out.println(nMax + " - " + nMin + " = " + (nMax-nMin) );
		}
		else {
			System.out.println(nMin + " - " + nMax + " = " + (nMin-nMax) );			
		}
//
//		2. 두 수의 차 구하기 - 절대값을 이용하는 방법
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//
//		1- 두 수를 입력받는다. A,B
//		2- A에서 B를 뺀다
//		3- 절대값을 씌워서 양수값을 구한다.
//		    ABS() 같은 함수 사용
//		4- 해당 값을 출력한다.
		System.out.println("\n[2번--------------------------------]");
		
		int nNum1 = 35;
		int nNum2 = 78;
		
		System.out.println(nNum1 + " - " + nNum2 + " = " + Math.abs(nNum1-nNum2) );
		
//
//		3. 짝수와 홀수 판별하기
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//
//		1- 값을 입력받는다.
//		2- 2로 나누어 나머지 값이 있는지 조사한다.
//		    % 연산자 사용
//		3- 나머지 값이 있는 경우 홀수, 없는 경우 짝수로 출력한다.
//
		System.out.println("\n[3번--------------------------------]");
		
		int nNum3 = 71;
		
		if(nNum3%2 != 0) {
			System.out.println(nNum3 + "는 홀수 입니다");			
		}
		else {
			System.out.println(nNum3 + "는 짝수 입니다");			
		}
		
		
//		4. 두 수 중 큰 수 찾기
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//
//		1- 두 수를 입력받는다. A,B
//		2- 두 수의 크기를 비교한다.
//		3- 값이 큰 값을 큰 수로, 작은 값을 작은 수로 출력한다.
		System.out.println("\n[4번--------------------------------]");
		
		int nNum41 = 325;
		int nNum42 = 738;
		
		if(nNum41 == nNum42) {
			System.out.println(nNum41 + " ==" + nNum42);				
		}
		else if(nNum41 > nNum42) {
			System.out.println(nNum41 + ">" + nNum42);				
		}
		else {
			System.out.println(nNum41 + "<" + nNum42);			
		}
//
//		5. 세 수중 가장 큰 수 찾기 – 두 가지 방법
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//		case1>
//		1- 세 수를 입력받는다. A,B,C
//		2- 가장 큰 수를 저장할 변수를 만든다. M
//		3- A를 M 값에 넣는다.
//		4- M과 B를 비교한다. B가 M보다 큰경우, B를 M에 넣는다.
//		5- M과 C를 비교한다. C가 M보다 큰경우, C를 M에 넣는다.
//		6- M 값을 출력한다.
		System.out.println("\n[4번--------------------------------]");
		
		int nNum51 = 325;
		int nNum52 = 888;
		int nNum53 = 738;
		int nMax5 = 0;
		
		nMax5 = nNum51;
		
		if(nMax5 < nNum52) {
			nMax5 = nNum52;	
		}
		
		if(nMax5 < nNum53) {
			nMax5 = nNum53;				
		}
		System.out.println(nNum51+", "+nNum52+", "+nNum53+" 중 가장 큰 수는 "+ nMax5);
		
		
		
//		case2>
//		1- 세 수를 입력받는다. A,B,C
//		2- 세 수를 순서대로 저장한다. A를 첫번째, B를 두번째, C를 세번째
//		   큰 수 순서대로 정렬을 하려한다.
//		3- A와 B를 비교한다. B가 큰 경우, A와 B의 위치를 바꾼다
//		   (위치를 바꾸는 방법은 7. 두 변수 값 교환하기 를 참고)
//
//		 3.1- A-B-C 순서인 경우
//		    B와 C를 비교한다. C가 큰 경우, B와 C의 위치를 바꾼다.
//
//		    3.1.1- A-B-C 순서인 경우
//		       가장 큰 수는 A이다.
//
//		    3.1.2-A-C-B 순서인 경우
//		        A와 C를 비교한다. C가 큰 경우, A와C의 위치를 바꾼다.
//		       A-C-B 인 경우엔 A가 가장 큰 수이다.
//		       C-A-B인 경우엔 C가 가장 큰 수이다.
//
//		 3.2- B-A-C 순서인경우
//		     A와 C를 비교한다. C가 큰 경우, A와 C의 위치를 바꾼다.
//
//		    3.1.1- B-A-C 순서인 경우
//		       가장 큰 수는 B이다.
//
//		    3.1.2-B-C-A 순서인 경우
//		        B와 C를 비교한다. C가 큰 경우, B와C의 위치를 바꾼다.
//		       B-C-A 인 경우엔 B가 가장 큰 수이다.
//		       C-B-A인 경우엔 C가 가장 큰 수이다.
//
//
//
//		6. 최대값 찾기
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//		  
//		   1-값을 순차적으로 입력받아 순서대로 저장해둔다.
//		        1.2.3…..N
//		   2- 최대값을 저장할 Max 값을 정의한다.
//		   3- Max에 첫번때 값을 넣는다.
//		   4- Max와 두번째 값을 비교한다. Max 값보다 두번째 값이 큰 경우,
//		      Max 값에 두번째 값을 넣는다.
//		   5- Max와 세번째 값을 비교한다. Max 값보다 세번째 값이 큰 경우,
//		      Max 값에 세번째 값을 넣는다.
//		   6-Max와 N번째 값을 비교한다. Max 값보다 N번째 값이 큰 경우,
//		      Max 값에 N번째 값을 넣는다.
//		   7-위와 같은 과정을 N번 반복한 후 Max값을 출력한다.
//
//		배열을 정의 하여 5번을 루프로 돌면서 비교 
		System.out.println("\n[6번--------------------------------]");
		System.out.println("배열을 정의 하여 5번을 루프로 돌면서 비교");
//
//
//		7. 두 변수 값 교환하기
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//		 1-두 변수를 A,B라 정의한다.
//		 2-임시 변수 Temp를 만든다.
//		 3-A값을 Temp로 옮긴다.
//		 4-B값을 A로 옮긴다.
//		 5-Temp 값을 B로 옮긴다.
//		 6-교환완료
//
		System.out.println("\n[7번--------------------------------]");
		int A=23;
		int B=323;
		System.out.println("A = " + A + " B = " + B);
		int nTemp;
		nTemp = A;
		A = B;
		B = nTemp;
		System.out.println("A = " + A + " B = " + B);
//
//
//
//		8. 작은 수에서 큰 수까지의 합 구하기
//		해결할 수 있는 방법을 순차적으로 기술하세요. 
//		case1> 특정숫자들이 주어지는 경우 예)2,4,6,7,8,10
//		  1-입력받는 수들을 작은수에서 큰 수 순서로 정렬한다.
//		     (정렬방법은 5. 세 수중 가장 큰 수 찾기 – 두 가지 방법 Case2> 참고)
//		  2-Total이라는 변수를 정의한다.
//		  3-Total에 작은 수에서 큰수까지 순차적으로 더해간다.
//		      Total = Total + 변수
//		  4-Total값을 출력한다.
//		case2> 작은수와 큰수만 주어지는 경우 예)작은수 20, 큰수 120
//		  1-작은수와 큰수를 변수에 저장한다. min,max
//		  2-Total이라는 변수를 정의한다.
//		  3-작은수에서 큰수까지 순차적으로 증가시켜 가며 Total에 저장한다.
//		          [pseudo code]
//		           for i=min to max{
//		               Total = Total +i
//		          }
//		  4-Total값을 출력한다.
		System.out.println("\n[8번--------------------------------]");
		int nMin8=1;
		int nMax8=100;
		int nTotal=0;
		for(int i=nMin8;i<=nMax8;i++) {
			nTotal = nTotal + i;
		}
		
		System.out.println(nMin8 + " ~ " + nMax8 + "의 합은"+nTotal);
//
//
//
//		9. 특정 숫자 까지의 3의배수 합 구하기
//		해결할 수 있는 방법을 순차적으로 기술하세요.
//		 1-특정숫자를 입력받는다. max라는 변수에 저장한다.
//		 2-특정숫자까지라고 조건이 주어졌으므로 1부터 시작한다고 가정한다.
//		 3-입력받는 숫자까지 숫자를 증가시켜가며, 3의 배수인 경우 합을 구한다.
//		   3의 배수를 구하는 방법은 3으로 나누었을때 나머지가 0인지 확인한다.
//		   % 연산자 사용
//		          [pseudo code]
//		          Total = 0
//		           for i=1 to max{
//		               if((i%3)==0){
//		                   Total = Total + i
//		               }
//		            }
//
		System.out.println("\n[9번--------------------------------]");
		int nTotal9=0;
		//int nNum9=29;
		int nNum9=10;
		for(int i=1;i<=nNum9;i++) {
			if((i%3)==0) {
				nTotal9 = nTotal9 + i;				
			}			
		}
		System.out.println(nNum9+"까지의 3의 배수의 합은 "+nTotal9);
//
//
//
//
//		10. 1, -2, 3, -4, ... , -100 합 구하기
//		  해결할 수 있는 방법을 순차적으로 기술하세요.
//		case1>
//		    1- 합을 저장할 변수 Total을 정의한다.
//		    2- 홀수는 양수, 짝수는 음수로 100까지 생성한다.
//		        방법>for 문등을 활용하여, 1부터 100까지 숫자를 생성하고,
//		       2로 나누어 떨어지지 않는 경우는 덧셈을(홀수)
//		       2로 나누어 떨어지는 경우는 뺄셈을(짝수)
//		       수행한다. % 연산자를 사용한다.
//		          [pseudo code]
//		          Total = 0
//		           for i=1 to 100{
//		               if((i%2)==0){
//		                   Total = Total - i
//		               }
//		              else{
//		                  Total = Total + i
//		              }
//		            }
//		case2>
//		     1, -2, 3, -4, ... , -100 합 구하기
//		     단순히 값을 구하는 것이라면 (n -( n+1))*50 의 형태이므로, -50임.
//		            
		System.out.println("\n[10번--------------------------------]\n");
		int nTotal10=0;
		for(int i=0;i<=100;i++) {
			if((i%2)==0) {
				nTotal10= nTotal10 - i;				
			}
			else {
				nTotal10= nTotal10 + i;				
			}
			
		}
		System.out.println("1, -2, 3, -4, .... , -100 까지의 합은 " + nTotal10);
	}

}
